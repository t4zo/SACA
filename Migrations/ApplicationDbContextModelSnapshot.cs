// <auto-generated />

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using SACA.Data;
using System;

namespace SACA.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    internal class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ApplicationUserCategory", b =>
            {
                b.Property<int>("ApplicationUsersId")
                    .HasColumnType("integer")
                    .HasColumnName("application_users_id");

                b.Property<int>("CategoriesId")
                    .HasColumnType("integer")
                    .HasColumnName("categories_id");

                b.HasKey("ApplicationUsersId", "CategoriesId")
                    .HasName("pk_application_user_category");

                b.HasIndex("CategoriesId")
                    .HasDatabaseName("ix_application_user_category_categories_id");

                b.ToTable("application_user_category");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .UseIdentityByDefaultColumn();

                b.Property<string>("ClaimType")
                    .HasColumnType("text")
                    .HasColumnName("claim_type");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text")
                    .HasColumnName("claim_value");

                b.Property<int>("RoleId")
                    .HasColumnType("integer")
                    .HasColumnName("role_id");

                b.HasKey("Id")
                    .HasName("pk_role_claims");

                b.HasIndex("RoleId")
                    .HasDatabaseName("ix_role_claims_role_id");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .UseIdentityByDefaultColumn();

                b.Property<string>("ClaimType")
                    .HasColumnType("text")
                    .HasColumnName("claim_type");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text")
                    .HasColumnName("claim_value");

                b.Property<int>("UserId")
                    .HasColumnType("integer")
                    .HasColumnName("user_id");

                b.HasKey("Id")
                    .HasName("pk_user_claims");

                b.HasIndex("UserId")
                    .HasDatabaseName("ix_user_claims_user_id");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("text")
                    .HasColumnName("login_provider");

                b.Property<string>("ProviderKey")
                    .HasColumnType("text")
                    .HasColumnName("provider_key");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("text")
                    .HasColumnName("provider_display_name");

                b.Property<int>("UserId")
                    .HasColumnType("integer")
                    .HasColumnName("user_id");

                b.HasKey("LoginProvider", "ProviderKey")
                    .HasName("pk_user_logins");

                b.HasIndex("UserId")
                    .HasDatabaseName("ix_user_logins_user_id");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
            {
                b.Property<int>("UserId")
                    .HasColumnType("integer")
                    .HasColumnName("user_id");

                b.Property<int>("RoleId")
                    .HasColumnType("integer")
                    .HasColumnName("role_id");

                b.HasKey("UserId", "RoleId")
                    .HasName("pk_user_roles");

                b.HasIndex("RoleId")
                    .HasDatabaseName("ix_user_roles_role_id");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.Property<int>("UserId")
                    .HasColumnType("integer")
                    .HasColumnName("user_id");

                b.Property<string>("LoginProvider")
                    .HasColumnType("text")
                    .HasColumnName("login_provider");

                b.Property<string>("Name")
                    .HasColumnType("text")
                    .HasColumnName("name");

                b.Property<string>("Value")
                    .HasColumnType("text")
                    .HasColumnName("value");

                b.HasKey("UserId", "LoginProvider", "Name")
                    .HasName("pk_user_tokens");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("SACA.Models.Category", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .UseIdentityByDefaultColumn()
                    .HasIdentityOptions(100L);

                b.Property<string>("Name")
                    .HasColumnType("text")
                    .HasColumnName("name");

                b.HasKey("Id")
                    .HasName("pk_categories");

                b.ToTable("categories");
            });

            modelBuilder.Entity("SACA.Models.Identity.ApplicationRole", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .UseIdentityByDefaultColumn();

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text")
                    .HasColumnName("concurrency_stamp");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("name");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("normalized_name");

                b.HasKey("Id")
                    .HasName("pk_roles");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("SACA.Models.Identity.ApplicationUser", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .UseIdentityByDefaultColumn();

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("integer")
                    .HasColumnName("access_failed_count");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text")
                    .HasColumnName("concurrency_stamp");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("email");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("boolean")
                    .HasColumnName("email_confirmed");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("boolean")
                    .HasColumnName("lockout_enabled");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("lockout_end");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("normalized_email");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("normalized_user_name");

                b.Property<string>("PasswordHash")
                    .HasColumnType("text")
                    .HasColumnName("password_hash");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("text")
                    .HasColumnName("phone_number");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("boolean")
                    .HasColumnName("phone_number_confirmed");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("text")
                    .HasColumnName("security_stamp");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("boolean")
                    .HasColumnName("two_factor_enabled");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("user_name");

                b.HasKey("Id")
                    .HasName("pk_users");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("SACA.Models.Image", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasColumnName("id")
                    .UseIdentityByDefaultColumn()
                    .HasIdentityOptions(100L);

                b.Property<int>("CategoryId")
                    .HasColumnType("integer")
                    .HasColumnName("category_id");

                b.Property<string>("FullyQualifiedPublicUrl")
                    .HasColumnType("text")
                    .HasColumnName("fully_qualified_public_url");

                b.Property<string>("Name")
                    .HasColumnType("text")
                    .HasColumnName("name");

                b.Property<string>("Url")
                    .HasColumnType("text")
                    .HasColumnName("url");

                b.Property<int?>("UserId")
                    .HasColumnType("integer")
                    .HasColumnName("user_id");

                b.HasKey("Id")
                    .HasName("pk_images");

                b.HasIndex("CategoryId")
                    .HasDatabaseName("ix_images_category_id");

                b.HasIndex("UserId")
                    .HasDatabaseName("ix_images_user_id");

                b.ToTable("images");
            });

            modelBuilder.Entity("ApplicationUserCategory", b =>
            {
                b.HasOne("SACA.Models.Identity.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("ApplicationUsersId")
                    .HasConstraintName("fk_application_user_category_users_application_users_id")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SACA.Models.Category", null)
                    .WithMany()
                    .HasForeignKey("CategoriesId")
                    .HasConstraintName("fk_application_user_category_categories_categories_id")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.HasOne("SACA.Models.Identity.ApplicationRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .HasConstraintName("fk_role_claims_asp_net_roles_application_role_id")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.HasOne("SACA.Models.Identity.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .HasConstraintName("fk_user_claims_asp_net_users_application_user_id")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.HasOne("SACA.Models.Identity.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .HasConstraintName("fk_user_logins_asp_net_users_application_user_id")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
            {
                b.HasOne("SACA.Models.Identity.ApplicationRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .HasConstraintName("fk_user_roles_asp_net_roles_application_role_id")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SACA.Models.Identity.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .HasConstraintName("fk_user_roles_asp_net_users_application_user_id")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.HasOne("SACA.Models.Identity.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .HasConstraintName("fk_user_tokens_asp_net_users_application_user_id")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SACA.Models.Image", b =>
            {
                b.HasOne("SACA.Models.Category", "Category")
                    .WithMany("Images")
                    .HasForeignKey("CategoryId")
                    .HasConstraintName("fk_images_categories_category_id")
                    .OnDelete(DeleteBehavior.Restrict);

                b.HasOne("SACA.Models.Identity.ApplicationUser", "User")
                    .WithMany("Images")
                    .HasForeignKey("UserId")
                    .HasConstraintName("fk_images_users_user_id")
                    .OnDelete(DeleteBehavior.Cascade);

                b.Navigation("Category");

                b.Navigation("User");
            });

            modelBuilder.Entity("SACA.Models.Category", b => { b.Navigation("Images"); });

            modelBuilder.Entity("SACA.Models.Identity.ApplicationUser", b => { b.Navigation("Images"); });
#pragma warning restore 612, 618
        }
    }
}